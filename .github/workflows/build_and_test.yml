name: Build & test

on:
  push:
    branches:
      - devel
      - master
  pull_request:
    branches:
      - master

jobs:
  build-test:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        c_compiler: [gcc, clang, cl]
        build_type: [Debug, Release]
        cxx_standard: ["17", "20"]
        include:
          - c_compiler: gcc
            cxx_compiler: g++
          - c_compiler: clang
            cxx_compiler: clang++
          - c_compiler: cl
            cxx_compiler: cl
          - os: windows-latest
            test_name: .\Bin\UnitTest.exe
          - os: ubuntu-latest
            test_name: ./Bin/UnitTest
          - build_type: Debug
            conan_preset: "conan-debug"
          - build_type: Release
            conan_preset: "conan-release"
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    name: ${{ matrix.c_compiler }} - ${{ matrix.build_type }} - ${{ matrix.os }} - c++${{ matrix.cxx_standard }}
        
    runs-on: ${{matrix.os}}
    
    steps:
    - uses: actions/checkout@v2
    - uses: seanmiddleditch/gha-setup-ninja@v3
    - uses: seanmiddleditch/gha-setup-vsdevenv@master

    - name: Install conan
      shell: bash
      env:
        CC: "${{ matrix.c_compiler != 'cl' && matrix.c_compiler || '' }}"
        CXX: "${{ matrix.cxx_compiler != 'cl' && matrix.cxx_compiler || '' }}"
      run: |
        pip install conan==2.0.7
        conan profile detect --name ci --force
        python $GITHUB_WORKSPACE/support/update-conan-profile.py $(conan profile path ci) ${{matrix.build_type}} ${{matrix.c_compiler}} ${{matrix.cxx_compiler}} ${{matrix.cxx_standard}}

    - name: Cache conan packages
      id: cache-conan
      uses: actions/cache@v3
      with:
        path: ~/.conan2/p
        key: conan-cache-packages-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ matrix.cxx_standard }}

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      env:
        CC: ${{matrix.c_compiler}}
        CXX: ${{matrix.cxx_compiler}}
      run: |
        conan install $GITHUB_WORKSPACE --output-folder=. --build=missing -pr ci -pr:b ci -s build_type=${{ matrix.build_type }}
        conan cache clean
        cmake $GITHUB_WORKSPACE --preset ${{ matrix.conan_preset }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{matrix.build_type}}

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ./Bin/UnitTest
