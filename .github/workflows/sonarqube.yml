name: SonarQube
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
      build_profile: "clang17d"
      conan_preset: "clang-17-debug"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: seanmiddleditch/gha-setup-ninja@v4

      - run: pip install conan
  
      - name: Install native compilers
        run: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt update

            sudo apt install gcc-13 g++-13
            sudo update-alternatives --remove-all gcc || true
            sudo update-alternatives --remove-all g++ || true
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 10 --slave /usr/bin/g++ g++ /usr/bin/g++-13

            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh 17 clang llvm

            sudo update-alternatives --remove-all clang || true
            sudo update-alternatives --remove-all clang++ || true
            sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-17 10 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-17

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v3
  
      - name: Cache conan packages
        id: cache-conan
        uses: actions/cache@v3
        with:
          path: ~/.conan2/p
          key: conan-cache-packages-${{ env.build_profile }}
  
      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build
  
      - name: Configure CMake
        shell: bash
        env:
          PR: "${{github.workspace}}/.github/build_profiles/${{env.build_profile}}"
        run: |
          cmake -E make_directory "${{github.workspace}}/build"
          conan install "${{github.workspace}}" --build=missing -pr $PR -pr:b $PR
          conan cache clean
          cmake -S "${{github.workspace}}" --preset conan-${{ env.conan_preset }} -DENABLE_LLVM_COV:BOOL=ON
  
      - name: Build using Sonar wrapper
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build --preset conan-${{ env.conan_preset }}

      - name: Template coverage
        run: |
          wget https://github.com/petiaccja/TemplateCoverage/releases/download/v1.4.0/TemplateCoverage_Linux_x86_64.zip
          unzip TemplateCoverage_Linux_x86_64.zip
          chmod +x ./TemplateCoverage_Linux_x86_64/template-coverage
          export RESOURCE_DIR=$(clang++ -print-resource-dir)
          python3 ./TemplateCoverage_Linux_x86_64/run_on_compile_commands.py -p ${{github.workspace}}/build/${{env.conan_preset}}/compile_commands.json ./TemplateCoverage_Linux_x86_64/template-coverage -- --format=lcov --out-file=${{github.workspace}}/template_coverage.info -extra-arg=-resource-dir=$RESOURCE_DIR

      - name: Test & code coverage
        working-directory: ${{github.workspace}}/build/${{ env.conan_preset }}/bin
        shell: bash
        run: |
          ./UnitTest --reporter junit --out ${{github.workspace}}/tests.xml
          llvm-profdata-17 merge -sparse default.profraw -o coverage.profdata
          llvm-cov-17 export -format=lcov -object ./UnitTest -instr-profile=coverage.profdata > ${{github.workspace}}/test_coverage.info
        
      - name: Merge coverage reports
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
        with:
          reports: template_coverage.info;test_coverage.info
          targetdir: coverage
          reporttypes: SonarQube
  
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
